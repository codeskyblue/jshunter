#
# REGULAR: true|false
# Enable rules by set them to true.
# Disable rules by set them to false or delete it.
# 
# eg: jquery.*.js         program will match such regex  ^jquery.*.js$
#

[common]
extention = php,html,htm,js    # split with ,

# which file you don't want to check
[omitfile]
jquery.* = true     # jquery file
jshint.js = true
\..* = true         # hidden file
.*\.min\.js = true  # compressed js file

# which dir you don't want to check
[omitdir]
\..* = true         # hidden dir
fckeditor = true    # html edit plugin
ueditor = true
editor = true
ZeroClipboard = true

jquery = true
jqGrid = true
backbone = true
knockout = true
bootstrap = true
highstock = true
WdatePicker = true
raphael = true
highchart = true
nuit = true
WdatePicker = true

css = true
styles = true

mjsunit = true
fly = false
ext = false
svn = false
tangram = false
global = false
data = false
lib = false
util = false
compress = false

swf = true
swfobject = true
html5 = true
json2 = true
My97DatePicker = true

#
# run as a program, and merge with hint output
# default plugin dir is core/plugin, change by --plugin=
# !!! only search .js file, result just like `ls plugin_dir/*.js`
# !!! default: true(enable)
#
[plugin]
sample_plugin.js = false

#
# The level config is used when gernerte html report
#
# To make it clearly, we make a example
# eg:   Unsafe character = warning
# If check results contains string("Unsafe character"), then you can find warning in the html report .
#
# There 3 levels: ignore, warning, error
#
[level]
Unsafe character = ignore
Too many var statements = ignore
Unexpected dangling = ignore
Mixed spaces and tabs = ignore

Mixed spaces and tabs = warning
to compare with = warning
is not defined = warning
A constructor name should start with an uppercase letter = warning
Expected an assignment or function call and instead saw an expression = warning
Missing semicolon = warning
console = error
alert = warning
top.control = warning
timestamp missed = warning

###############################################################################
# config below is for hint.js  hint的配置项，详见http://www.jshint.com/docs/
#
# predefine varables
#
[hint_predef]
baidu = true
nuit = true
Ext = true
ko = true
_ = true
CT = true
noah = true
Noah = true
Backbone = true
WdatePicker = true

#
# config below is for profession people
#

[hint_option]
asi         = true  # if automatic semicolon insertion should be tolerated
bitwise     = true  # if bitwise operators should not be allowed
boss        = false  # if advanced usage of assignments should be allowed
browser     = true  # if the standard browser globals should be predefined
camelcase   = false  # if identifiers should be required in camel case
couch       = false  # if CouchDB globals should be predefined
curly       = false  # if curly braces around all blocks should be required
debug       = false  # if debugger statements should be allowed
devel       = true  # if logging globals should be predefined (console 
					# alert  etc.)
dojo        = true  # if Dojo Toolkit globals should be predefined
eqeqeq      = false  # if === should be required
eqnull      = false  # if == null comparisons should be tolerated
es5         = false  # if ES5 syntax should be allowed
esnext      = false  # if es.next specific syntax should be allowed
evil        = true  # if eval should be allowed
expr        = true  # if ExpressionStatement should be allowed as Programs
forin       = true  # if for in statements must filter
funcscope   = true  # if only function scope should be used for scope tests
globalstrict= true  # if global "use strict"; should be allowed (also
					# enables 'strict')
immed       = false  # if immediate invocations must be wrapped in parens
indent      = false  # if indention must be checked
iterator    = true  # if the `__iterator__` property should be allowed
jquery      = true  # if jQuery globals should be predefined
lastsemic   = true  # if semicolons may be ommitted for the trailing
					# statements inside of a one-line blocks.
latedef     = true  # if the use before definition should not be tolerated
laxbreak    = true  # if line breaks should not be checked
laxcomma    = true  # if line breaks should not be checked around commas
loopfunc    = true  # if functions should be allowed to be defined within
					# loops
maxerr      = 50000 
mootools    = true  # if MooTools globals should be predefined
multistr    = true  # allow multiline strings
newcap      = true  # if constructor names must be capitalized
noarg       = false  # if arguments.caller and arguments.callee should be
					# disallowed
node        = true  # if the Node.js environment globals should be
					# predefined
noempty     = true  # if empty blocks should be disallowed
nonew       = true  # if using `new` for side-effects should be disallowed
nonstandard = true  # if non-standard (but widely adopted) globals should
					# be predefined
nomen       = false  # if names should be checked
onevar      = true  # if only one var statement per function should be
					# allowed
onecase     = true  # if one case switch statements should be allowed
passfail    = false  # if the scan should stop on first error
plusplus    = false  # if increment/decrement should not be allowed
proto       = true  # if the `__proto__` property should be allowed
prototypejs = true  # if Prototype and Scriptaculous globals should be
					# predefined
regexdash   = true  # if unescaped first/last dash (-) inside brackets
					# should be tolerated
regexp      = true  # if the . should not be allowed in regexp literals
rhino       = true  # if the Rhino environment globals should be predefined
undef       = false  # if variables should be declared before used
unused      = false  # if variables should be always used
scripturl   = true  # if script-targeted URLs should be tolerated
shadow      = true  # if variable shadowing should be tolerated
smarttabs   = false  # if smarttabs should be tolerated
					# (http=#www.emacswiki.org/emacs/SmartTabs)
strict      = false  # require the "use strict"; pragma
sub         = true  # if all forms of subscript notation are tolerated
supernew    = true  # if `new function () { ... };` and `new Object;`
					# should be tolerated
trailing    = false  # if trailing whitespace rules apply
validthis   = true  # if 'this' inside a non-constructor function is valid.
					# This is a function scoped option only.
withstmt    = true  # if with statements should be allowed
white       = false  # if strict whitespace rules apply
worker      = true  # if Web Worker script symbols should be allowed
wsh         = true  # if the Windows Scripting Host environment globals
					# should be predefined
